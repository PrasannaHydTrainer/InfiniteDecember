1) Which Package allows you to perform junit 


2) Which annotation used as if method to be executed only once in the entire test life cycle before test case



3) Which annotation used for everytime, the test case will be executed


4) Which annotation used for everytime, at the end of test case 

5) What would be output for this program

        int[] a=new int[]{1,2};
        int[] b =new int[]{1,2};
        assertArrayEquals("hello",a,b);

6) What is the output for below code

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;
import org.junit.After;  
import org.junit.AfterClass;  
import org.junit.Before;  
import org.junit.BeforeClass;

import org.junit.Test;


public class DemoTest {

    static Demo obj;

    @BeforeClass 
    public static void setUp() {
        obj = new Demo();
        System.out.println("Global Object Created...");
    }

    @AfterClass 
    public static void cleanUp() {
        obj = null;
        System.out.println("Object Deallocated...");
    }

    @Before 
    public void showInfo() {
        System.out.println("Test Case Started...");
    }

    @After 
    public void clearInfo() {
        System.out.println("Test Case Ended...");
    }
    
    @Test 
    public void testSayHello() {
        // Demo obj = new Demo();
        assertEquals("Welcome to Junit...", obj.sayHello());
    }

    @Test 
    public void testSum() {
        // Demo obj = new Demo();
        assertEquals(5, obj.sum(2,3));
    }

    @Test 
    public void testMax3() {
        // Demo obj = new Demo();
        assertEquals(5, obj.max3(2,3,5));
    }
}

7) What is the output for below code

public void before() {
    System.out.println("before");
   }
   @After 
   public void after() {
    System.out.println("After");
  }
   @Test
   public void test1() {
    System.out.println("Test 1");
   }

   @Test
   public void test2() {
    System.out.println("Test2");
   }
}

8)

public class JunitTest {
 
   @BeforeClass
   public static void beforeClass() {
     System.out.println("BeforeClass...");
   }
   @AfterClass 
   public static void afterClass() {
     System.out.println("AfterClass...");
   }

   public void before() {
    System.out.println("Before...");
   }
   @After 
   public void after() {
    System.out.println("After...");
   }
}

9)

public class DummyTest {
   @BeforeClass
   public static void beforeClass() {
     System.out.println("BeforeClass...");
   }
   @AfterClass 
   public static void afterClass() {
     System.out.println("AfterClass...");
   }

   public void before() {
    System.out.println("Before...");
   }
   @After 
   public void after() {
    System.out.println("After...");
   }


}


10) 

public class DummyTest {
   @BeforeClass
   public static void beforeClass() {
     System.out.println("BeforeClass...");
   }
   @AfterClass 
   public static void afterClass() {
     System.out.println("AfterClass...");
   }

   @Test 
   public void testMe() {
       assertEquals("Hi","Hi");
   }
   public void before() {
    System.out.println("Before...");
   }
   @After 
   public void after() {
    System.out.println("After...");
   }
}

11) 

@BeforeClass
   public static void beforeClass() {
     System.out.println("BeforeClass...");
   }
   @AfterClass 
   public static void afterClass() {
     System.out.println("AfterClass...");
   }
   @Before
   public void before() {
    System.out.println("Before...");
   }
   @Test
   public void testSayHello() {
     assertEquals("Hello","Hello");
   }
   @After 
   public void after() {
    System.out.println("After...");
   }

12)

public class Junit4Test {
  @Test 
  public void test() {
    Assert.assertTrue(false);
  }
  @Test
  public void test2() {
    assert false;
  }
}


13) 


 @Test 
   public void testMe() {
       assertEquals("November Batch","Hi","Hi");
   }

    @Test 
   public void testFail() {
       assertEquals("November Batch","Hi","Hello");
   }


14)

public class DemoTest {

    static Demo obj;

    @BeforeClass 
    public static void setUp() {
        obj = new Demo();
        System.out.println("Global Object Created...");
    }

    @AfterClass 
    public static void cleanUp() {
        obj = null;
        System.out.println("Object Deallocated...");
    }

    @Before 
    public void showInfo() {
        System.out.println("Test Case Started...");
    }

    @After 
    public void clearInfo() {
        System.out.println("Test Case Ended...");
    }
    
}

15)

public class DemoTest {

    static Demo obj;

    public static void setUp() {
        obj = new Demo();
        System.out.println("Global Object Created...");
    }

    @AfterClass 
    public static void cleanUp() {
        obj = null;
        System.out.println("Object Deallocated...");
    }

    @Before 
    public void showInfo() {
        System.out.println("Test Case Started...");
    }

    public void clearInfo() {
        System.out.println("Test Case Ended...");
    }
    
    @Test 
    public void testSayHello() {
        // Demo obj = new Demo();
        assertEquals("Welcome to Junit...", obj.sayHello());
    }

    @Test 
    public void testSum() {
        // Demo obj = new Demo();
        assertEquals(5, obj.sum(2,3));
    }

    @Test 
    public void testMax3() {
        // Demo obj = new Demo();
        assertEquals(5, obj.max3(2,3,5));
    }
}
